/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN (ParserMJ)
public class ParserMJ{  public static void main(String args []) throws ParseException  {    ParserMJ parser = new ParserMJ(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (ParserMJ.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        ParserMJ.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(ParserMJ)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{
  < SEMICOLON: ";" >
| < DOT: "." >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < IF: "if" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < TRUE: "true" >
| < FALSE: "false" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < MAIN: "main" >
| < NEW: "new" >
| < VOID: "void" >  
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < PRINT: "System.out.println" >       
| < CLASS: "class" > 
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}
void Program() :{}
{
	MainClass() ClassDecl()*}
void MainClass() :
{}{
  < CLASS > <ID > < LBRACE > < PLUBLIC > < STACTIC > < VOID > < MAIN >
  < LPAREN > < STRING > < LSQPAREN > < RSQPAREN > < ID > < RPAREN >
  < LBRACE > Statement() < RBRACE > < RBRACE >
}


int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
